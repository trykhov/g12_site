{"ast":null,"code":"/* eslint no-control-regex:0 */\n'use strict';\n\nvar base64 = require('../base64');\n\nvar qp = require('../qp');\n\nvar mimeTypes = require('./mime-types');\n\nmodule.exports = {\n  /**\n   * Checks if a value is plaintext string (uses only printable 7bit chars)\n   *\n   * @param {String} value String to be tested\n   * @returns {Boolean} true if it is a plaintext string\n   */\n  isPlainText: function isPlainText(value) {\n    if (typeof value !== 'string' || /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/.test(value)) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  /**\n   * Checks if a multi line string containes lines longer than the selected value.\n   *\n   * Useful when detecting if a mail message needs any processing at all â€“\n   * if only plaintext characters are used and lines are short, then there is\n   * no need to encode the values in any way. If the value is plaintext but has\n   * longer lines then allowed, then use format=flowed\n   *\n   * @param {Number} lineLength Max line length to check for\n   * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n   */\n  hasLongerLines: function hasLongerLines(str, lineLength) {\n    if (str.length > 128 * 1024) {\n      // do not test strings longer than 128kB\n      return true;\n    }\n\n    return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);\n  },\n\n  /**\n   * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @return {String} Single or several mime words joined together\n   */\n  encodeWord: function encodeWord(data, mimeWordEncoding, maxLength) {\n    mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);\n    maxLength = maxLength || 0;\n    var encodedStr;\n    var toCharset = 'UTF-8';\n\n    if (maxLength && maxLength > 7 + toCharset.length) {\n      maxLength -= 7 + toCharset.length;\n    }\n\n    if (mimeWordEncoding === 'Q') {\n      // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n      encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, function (chr) {\n        var ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n        if (chr === ' ') {\n          return '_';\n        } else {\n          return '=' + (ord.length === 1 ? '0' + ord : ord);\n        }\n      });\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = typeof data === 'string' ? data : base64.encode(data);\n      maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n    }\n\n    if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {\n      if (mimeWordEncoding === 'Q') {\n        encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n      } else {\n        // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n        var parts = [];\n        var lpart = '';\n\n        for (var i = 0, len = encodedStr.length; i < len; i++) {\n          var chr = encodedStr.charAt(i); // check if we can add this character to the existing string\n          // without breaking byte length limit\n\n          if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n            lpart += chr;\n          } else {\n            // we hit the length limit, so push the existing string and start over\n            parts.push(base64.encode(lpart));\n            lpart = chr;\n          }\n        }\n\n        if (lpart) {\n          parts.push(base64.encode(lpart));\n        }\n\n        if (parts.length > 1) {\n          encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');\n        } else {\n          encodedStr = parts.join('');\n        }\n      }\n    } else if (mimeWordEncoding === 'B') {\n      encodedStr = base64.encode(data);\n    }\n\n    return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');\n  },\n\n  /**\n   * Finds word sequences with non ascii text and converts these to mime words\n   *\n   * @param {String} value String to be encoded\n   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n   * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n   * @return {String} String with possible mime words\n   */\n  encodeWords: function encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {\n    maxLength = maxLength || 0;\n    var encodedValue; // find first word with a non-printable ascii in it\n\n    var firstMatch = value.match(/(?:^|\\s)([^\\s]*[\\u0080-\\uFFFF])/);\n\n    if (!firstMatch) {\n      return value;\n    }\n\n    if (encodeAll) {\n      // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n      return this.encodeWord(value, mimeWordEncoding, maxLength);\n    } // find the last word with a non-printable ascii in it\n\n\n    var lastMatch = value.match(/([\\u0080-\\uFFFF][^\\s]*)[^\\u0080-\\uFFFF]*$/);\n\n    if (!lastMatch) {\n      // should not happen\n      return value;\n    }\n\n    var startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n      index: 0\n    }).index;\n    var endIndex = lastMatch.index + (lastMatch[1] || '').length;\n    encodedValue = (startIndex ? value.substr(0, startIndex) : '') + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) + (endIndex < value.length ? value.substr(endIndex) : '');\n    return encodedValue;\n  },\n\n  /**\n   * Joins parsed header value together as 'value; param1=value1; param2=value2'\n   * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n   *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n   * @param {Object} structured Parsed header value\n   * @return {String} joined header value\n   */\n  buildHeaderValue: function buildHeaderValue(structured) {\n    var _this = this;\n\n    var paramsArray = [];\n    Object.keys(structured.params || {}).forEach(function (param) {\n      // filename might include unicode characters so it is a special case\n      // other values probably do not\n      var value = structured.params[param];\n\n      if (!_this.isPlainText(value) || value.length >= 75) {\n        _this.buildHeaderParam(param, value, 50).forEach(function (encodedParam) {\n          if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {\n            paramsArray.push(encodedParam.key + '=' + encodedParam.value);\n          } else {\n            paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));\n          }\n        });\n      } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n        paramsArray.push(param + '=' + JSON.stringify(value));\n      } else {\n        paramsArray.push(param + '=' + value);\n      }\n    });\n    return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');\n  },\n\n  /**\n   * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n   * Useful for splitting long parameter values.\n   *\n   * For example\n   *      title=\"unicode string\"\n   * becomes\n   *     title*0*=utf-8''unicode\n   *     title*1*=%20string\n   *\n   * @param {String|Buffer} data String to be encoded\n   * @param {Number} [maxLength=50] Max length for generated chunks\n   * @param {String} [fromCharset='UTF-8'] Source sharacter set\n   * @return {Array} A list of encoded keys and headers\n   */\n  buildHeaderParam: function buildHeaderParam(key, data, maxLength) {\n    var list = [];\n    var encodedStr = typeof data === 'string' ? data : (data || '').toString();\n    var encodedStrArr;\n    var chr, ord;\n    var line;\n    var startPos = 0;\n    var i, len;\n    maxLength = maxLength || 50; // process ascii only text\n\n    if (this.isPlainText(data)) {\n      // check if conversion is even needed\n      if (encodedStr.length <= maxLength) {\n        return [{\n          key: key,\n          value: encodedStr\n        }];\n      }\n\n      encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), function (str) {\n        list.push({\n          line: str\n        });\n        return '';\n      });\n\n      if (encodedStr) {\n        list.push({\n          line: encodedStr\n        });\n      }\n    } else {\n      if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n        // string containts surrogate pairs, so normalize it to an array of bytes\n        encodedStrArr = [];\n\n        for (i = 0, len = encodedStr.length; i < len; i++) {\n          chr = encodedStr.charAt(i);\n          ord = chr.charCodeAt(0);\n\n          if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n            chr += encodedStr.charAt(i + 1);\n            encodedStrArr.push(chr);\n            i++;\n          } else {\n            encodedStrArr.push(chr);\n          }\n        }\n\n        encodedStr = encodedStrArr;\n      } // first line includes the charset and language info and needs to be encoded\n      // even if it does not contain any unicode characters\n\n\n      line = 'utf-8\\x27\\x27';\n      var encoded = true;\n      startPos = 0; // process text with unicode or special chars\n\n      for (i = 0, len = encodedStr.length; i < len; i++) {\n        chr = encodedStr[i];\n\n        if (encoded) {\n          chr = this.safeEncodeURIComponent(chr);\n        } else {\n          // try to urlencode current char\n          chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr); // By default it is not required to encode a line, the need\n          // only appears when the string contains unicode or special chars\n          // in this case we start processing the line over and encode all chars\n\n          if (chr !== encodedStr[i]) {\n            // Check if it is even possible to add the encoded char to the line\n            // If not, there is no reason to use this line, just push it to the list\n            // and start a new line with the char that needs encoding\n            if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n              list.push({\n                line: line,\n                encoded: encoded\n              });\n              line = '';\n              startPos = i - 1;\n            } else {\n              encoded = true;\n              i = startPos;\n              line = '';\n              continue;\n            }\n          }\n        } // if the line is already too long, push it to the list and start a new one\n\n\n        if ((line + chr).length >= maxLength) {\n          list.push({\n            line: line,\n            encoded: encoded\n          });\n          line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);\n\n          if (chr === encodedStr[i]) {\n            encoded = false;\n            startPos = i - 1;\n          } else {\n            encoded = true;\n          }\n        } else {\n          line += chr;\n        }\n      }\n\n      if (line) {\n        list.push({\n          line: line,\n          encoded: encoded\n        });\n      }\n    }\n\n    return list.map(function (item, i) {\n      return {\n        // encoded lines: {name}*{part}*\n        // unencoded lines: {name}*{part}\n        // if any line needs to be encoded then the first line (part==0) is always encoded\n        key: key + '*' + i + (item.encoded ? '*' : ''),\n        value: item.line\n      };\n    });\n  },\n\n  /**\n   * Parses a header value with key=value arguments into a structured\n   * object.\n   *\n   *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n   *   {\n   *     'value': 'text/plain',\n   *     'params': {\n   *       'charset': 'UTF-8'\n   *     }\n   *   }\n   *\n   * @param {String} str Header value\n   * @return {Object} Header value as a parsed structure\n   */\n  parseHeaderValue: function parseHeaderValue(str) {\n    var response = {\n      value: false,\n      params: {}\n    };\n    var key = false;\n    var value = '';\n    var type = 'value';\n    var quote = false;\n    var escaped = false;\n    var chr;\n\n    for (var i = 0, len = str.length; i < len; i++) {\n      chr = str.charAt(i);\n\n      if (type === 'key') {\n        if (chr === '=') {\n          key = value.trim().toLowerCase();\n          type = 'value';\n          value = '';\n          continue;\n        }\n\n        value += chr;\n      } else {\n        if (escaped) {\n          value += chr;\n        } else if (chr === '\\\\') {\n          escaped = true;\n          continue;\n        } else if (quote && chr === quote) {\n          quote = false;\n        } else if (!quote && chr === '\"') {\n          quote = chr;\n        } else if (!quote && chr === ';') {\n          if (key === false) {\n            response.value = value.trim();\n          } else {\n            response.params[key] = value.trim();\n          }\n\n          type = 'key';\n          value = '';\n        } else {\n          value += chr;\n        }\n\n        escaped = false;\n      }\n    }\n\n    if (type === 'value') {\n      if (key === false) {\n        response.value = value.trim();\n      } else {\n        response.params[key] = value.trim();\n      }\n    } else if (value.trim()) {\n      response.params[value.trim().toLowerCase()] = '';\n    } // handle parameter value continuations\n    // https://tools.ietf.org/html/rfc2231#section-3\n    // preprocess values\n\n\n    Object.keys(response.params).forEach(function (key) {\n      var actualKey, nr, match, value;\n\n      if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n        actualKey = key.substr(0, match.index);\n        nr = Number(match[2] || match[3]) || 0;\n\n        if (!response.params[actualKey] || typeof response.params[actualKey] !== 'object') {\n          response.params[actualKey] = {\n            charset: false,\n            values: []\n          };\n        }\n\n        value = response.params[key];\n\n        if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n          response.params[actualKey].charset = match[1] || 'iso-8859-1';\n          value = match[2];\n        }\n\n        response.params[actualKey].values[nr] = value; // remove the old reference\n\n        delete response.params[key];\n      }\n    }); // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n\n    Object.keys(response.params).forEach(function (key) {\n      var value;\n\n      if (response.params[key] && Array.isArray(response.params[key].values)) {\n        value = response.params[key].values.map(function (val) {\n          return val || '';\n        }).join('');\n\n        if (response.params[key].charset) {\n          // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n          response.params[key] = '=?' + response.params[key].charset + '?Q?' + value // fix invalidly encoded chars\n          .replace(/[=?_\\s]/g, function (s) {\n            var c = s.charCodeAt(0).toString(16);\n\n            if (s === ' ') {\n              return '_';\n            } else {\n              return '%' + (c.length < 2 ? '0' : '') + c;\n            }\n          }) // change from urlencoding to percent encoding\n          .replace(/%/g, '=') + '?=';\n        } else {\n          response.params[key] = value;\n        }\n      }\n    });\n    return response;\n  },\n\n  /**\n   * Returns file extension for a content type string. If no suitable extensions\n   * are found, 'bin' is used as the default extension\n   *\n   * @param {String} mimeType Content type to be checked for\n   * @return {String} File extension\n   */\n  detectExtension: function detectExtension(mimeType) {\n    return mimeTypes.detectExtension(mimeType);\n  },\n\n  /**\n   * Returns content type for a file extension. If no suitable content types\n   * are found, 'application/octet-stream' is used as the default content type\n   *\n   * @param {String} extension Extension to be checked for\n   * @return {String} File extension\n   */\n  detectMimeType: function detectMimeType(extension) {\n    return mimeTypes.detectMimeType(extension);\n  },\n\n  /**\n   * Folds long lines, useful for folding header lines (afterSpace=false) and\n   * flowed text (afterSpace=true)\n   *\n   * @param {String} str String to be folded\n   * @param {Number} [lineLength=76] Maximum length of a line\n   * @param {Boolean} afterSpace If true, leave a space in th end of a line\n   * @return {String} String with folded lines\n   */\n  foldLines: function foldLines(str, lineLength, afterSpace) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n    var pos = 0,\n        len = str.length,\n        result = '',\n        line,\n        match;\n\n    while (pos < len) {\n      line = str.substr(pos, lineLength);\n\n      if (line.length < lineLength) {\n        result += line;\n        break;\n      }\n\n      if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n        line = match[0];\n        result += line;\n        pos += line.length;\n        continue;\n      } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n        line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n      } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n        line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n      }\n\n      result += line;\n      pos += line.length;\n\n      if (pos < len) {\n        result += '\\r\\n';\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n   *\n   * @param {String} str Mime encoded string to be split up\n   * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n   * @return {Array} Split string\n   */\n  splitMimeEncodedString: function splitMimeEncodedString(str, maxlen) {\n    var curLine,\n        match,\n        chr,\n        done,\n        lines = []; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n\n    maxlen = Math.max(maxlen || 0, 12);\n\n    while (str.length) {\n      curLine = str.substr(0, maxlen); // move incomplete escaped char back to main\n\n      if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n        curLine = curLine.substr(0, match.index);\n      }\n\n      done = false;\n\n      while (!done) {\n        done = true; // check if not middle of a unicode char sequence\n\n        if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n          chr = parseInt(match[1], 16); // invalid sequence, move one char back anc recheck\n\n          if (chr < 0xc2 && chr > 0x7f) {\n            curLine = curLine.substr(0, curLine.length - 3);\n            done = false;\n          }\n        }\n      }\n\n      if (curLine.length) {\n        lines.push(curLine);\n      }\n\n      str = str.substr(curLine.length);\n    }\n\n    return lines;\n  },\n  encodeURICharComponent: function encodeURICharComponent(chr) {\n    var res = '';\n    var ord = chr.charCodeAt(0).toString(16).toUpperCase();\n\n    if (ord.length % 2) {\n      ord = '0' + ord;\n    }\n\n    if (ord.length > 2) {\n      for (var i = 0, len = ord.length / 2; i < len; i++) {\n        res += '%' + ord.substr(i, 2);\n      }\n    } else {\n      res += '%' + ord;\n    }\n\n    return res;\n  },\n  safeEncodeURIComponent: function safeEncodeURIComponent(str) {\n    var _this2 = this;\n\n    str = (str || '').toString();\n\n    try {\n      // might throw if we try to encode invalid sequences, eg. partial emoji\n      str = encodeURIComponent(str);\n    } catch (E) {\n      // should never run\n      return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, '');\n    } // ensure chars that are not handled by encodeURICompent are converted as well\n\n\n    return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, function (chr) {\n      return _this2.encodeURICharComponent(chr);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}