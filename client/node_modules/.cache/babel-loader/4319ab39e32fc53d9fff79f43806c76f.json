{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _classCallCheck = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/createClass\");\n\nvar toCamelCase = require('../helpers/to-camel-case');\n\nvar toSnakeCase = require('../helpers/to-snake-case');\n\nvar deepClone = require('../helpers/deep-clone');\n/**\n * Attachment class\n */\n\n\nvar Attachment =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor\n   */\n  function Attachment(data) {\n    _classCallCheck(this, Attachment);\n\n    //Create from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * From data\n   */\n\n\n  _createClass(Attachment, [{\n    key: \"fromData\",\n    value: function fromData(data) {\n      //Expecting object\n      if (typeof data !== 'object') {\n        throw new Error('Expecting object for Mail data');\n      } //Convert to camel case to make it workable, making a copy to prevent\n      //changes to the original objects\n\n\n      data = deepClone(data);\n      data = toCamelCase(data); //Extract properties from data\n\n      var _data = data,\n          content = _data.content,\n          filename = _data.filename,\n          type = _data.type,\n          disposition = _data.disposition,\n          contentId = _data.contentId; //Set data\n\n      this.setContent(content);\n      this.setFilename(filename);\n      this.setType(type);\n      this.setDisposition(disposition);\n      this.setContentId(contentId);\n    }\n    /**\n     * Set content\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      if (typeof content === 'undefined') {\n        return;\n      }\n\n      if (typeof content !== 'string') {\n        throw new Error('String expected for `content`');\n      }\n\n      this.content = content;\n    }\n    /**\n     * Set filename\n     */\n\n  }, {\n    key: \"setFilename\",\n    value: function setFilename(filename) {\n      if (typeof filename === 'undefined') {\n        return;\n      }\n\n      if (filename && typeof filename !== 'string') {\n        throw new Error('String expected for `filename`');\n      }\n\n      this.filename = filename;\n    }\n    /**\n     * Set type\n     */\n\n  }, {\n    key: \"setType\",\n    value: function setType(type) {\n      if (typeof type === 'undefined') {\n        return;\n      }\n\n      if (typeof type !== 'string') {\n        throw new Error('String expected for `type`');\n      }\n\n      this.type = type;\n    }\n    /**\n     * Set disposition\n     */\n\n  }, {\n    key: \"setDisposition\",\n    value: function setDisposition(disposition) {\n      if (typeof disposition === 'undefined') {\n        return;\n      }\n\n      if (typeof disposition !== 'string') {\n        throw new Error('String expected for `disposition`');\n      }\n\n      this.disposition = disposition;\n    }\n    /**\n     * Set content ID\n     */\n\n  }, {\n    key: \"setContentId\",\n    value: function setContentId(contentId) {\n      if (typeof contentId === 'undefined') {\n        return;\n      }\n\n      if (typeof contentId !== 'string') {\n        throw new Error('String expected for `contentId`');\n      }\n\n      this.contentId = contentId;\n    }\n    /**\n     * To JSON\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      //Extract properties from self\n      var content = this.content,\n          filename = this.filename,\n          type = this.type,\n          disposition = this.disposition,\n          contentId = this.contentId; //Initialize with mandatory properties\n\n      var json = {\n        content: content,\n        filename: filename\n      }; //Add whatever else we have\n\n      if (typeof type !== 'undefined') {\n        json.type = type;\n      }\n\n      if (typeof disposition !== 'undefined') {\n        json.disposition = disposition;\n      }\n\n      if (typeof contentId !== 'undefined') {\n        json.contentId = contentId;\n      } //Return\n\n\n      return toSnakeCase(json);\n    }\n  }]);\n\n  return Attachment;\n}(); //Export class\n\n\nmodule.exports = Attachment;","map":null,"metadata":{},"sourceType":"script"}