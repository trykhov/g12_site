{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar PoolResource = require('./pool-resource');\n\nvar SMTPConnection = require('../smtp-connection');\n\nvar wellKnown = require('../well-known');\n\nvar shared = require('../shared');\n\nvar packageData = require('../../package.json');\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\n\n\nvar SMTPPool =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(SMTPPool, _EventEmitter);\n\n  function SMTPPool(options) {\n    var _this;\n\n    _classCallCheck(this, SMTPPool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SMTPPool).call(this));\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        url: options\n      };\n    }\n\n    var urlData;\n    var service = options.service;\n\n    if (typeof options.getSocket === 'function') {\n      _this.getSocket = options.getSocket;\n    }\n\n    if (options.url) {\n      urlData = shared.parseConnectionUrl(options.url);\n      service = service || urlData.service;\n    }\n\n    _this.options = shared.assign(false, // create new object\n    options, // regular options\n    urlData, // url options\n    service && wellKnown(service) // wellknown options\n    );\n    _this.options.maxConnections = _this.options.maxConnections || 5;\n    _this.options.maxMessages = _this.options.maxMessages || 100;\n    _this.logger = shared.getLogger(_this.options, {\n      component: _this.options.component || 'smtp-pool'\n    }); // temporary object\n\n    var connection = new SMTPConnection(_this.options);\n    _this.name = 'SMTP (pool)';\n    _this.version = packageData.version + '[client:' + connection.version + ']';\n    _this._rateLimit = {\n      counter: 0,\n      timeout: null,\n      waiting: [],\n      checkpoint: false,\n      delta: Number(_this.options.rateDelta) || 1000,\n      limit: Number(_this.options.rateLimit) || 0\n    };\n    _this._closed = false;\n    _this._queue = [];\n    _this._connections = [];\n    _this._connectionCounter = 0;\n    _this.idling = true;\n    setImmediate(function () {\n      if (_this.idling) {\n        _this.emit('idle');\n      }\n    });\n    return _this;\n  }\n  /**\n   * Placeholder function for creating proxy sockets. This method immediatelly returns\n   * without a socket\n   *\n   * @param {Object} options Connection options\n   * @param {Function} callback Callback function to run with the socket keys\n   */\n\n\n  _createClass(SMTPPool, [{\n    key: \"getSocket\",\n    value: function getSocket(options, callback) {\n      // return immediatelly\n      return setImmediate(function () {\n        return callback(null, false);\n      });\n    }\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(mail, callback) {\n      var _this2 = this;\n\n      if (this._closed) {\n        return false;\n      }\n\n      this._queue.push({\n        mail: mail,\n        callback: callback\n      });\n\n      if (this.idling && this._queue.length >= this.options.maxConnections) {\n        this.idling = false;\n      }\n\n      setImmediate(function () {\n        return _this2._processMessages();\n      });\n      return true;\n    }\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this3 = this;\n\n      var connection;\n      var len = this._connections.length;\n      this._closed = true; // clear rate limit timer if it exists\n\n      clearTimeout(this._rateLimit.timeout);\n\n      if (!len && !this._queue.length) {\n        return;\n      } // remove all available connections\n\n\n      for (var i = len - 1; i >= 0; i--) {\n        if (this._connections[i] && this._connections[i].available) {\n          connection = this._connections[i];\n          connection.close();\n          this.logger.info({\n            tnx: 'connection',\n            cid: connection.id,\n            action: 'removed'\n          }, 'Connection #%s removed', connection.id);\n        }\n      }\n\n      if (len && !this._connections.length) {\n        this.logger.debug({\n          tnx: 'connection'\n        }, 'All connections removed');\n      }\n\n      if (!this._queue.length) {\n        return;\n      } // make sure that entire queue would be cleaned\n\n\n      var invokeCallbacks = function invokeCallbacks() {\n        if (!_this3._queue.length) {\n          _this3.logger.debug({\n            tnx: 'connection'\n          }, 'Pending queue entries cleared');\n\n          return;\n        }\n\n        var entry = _this3._queue.shift();\n\n        if (entry && typeof entry.callback === 'function') {\n          try {\n            entry.callback(new Error('Connection pool was closed'));\n          } catch (E) {\n            _this3.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n        }\n\n        setImmediate(invokeCallbacks);\n      };\n\n      setImmediate(invokeCallbacks);\n    }\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */\n\n  }, {\n    key: \"_processMessages\",\n    value: function _processMessages() {\n      var _this4 = this;\n\n      var connection;\n      var i, len; // do nothing if already closed\n\n      if (this._closed) {\n        return;\n      } // do nothing if queue is empty\n\n\n      if (!this._queue.length) {\n        if (!this.idling) {\n          // no pending jobs\n          this.idling = true;\n          this.emit('idle');\n        }\n\n        return;\n      } // find first available connection\n\n\n      for (i = 0, len = this._connections.length; i < len; i++) {\n        if (this._connections[i].available) {\n          connection = this._connections[i];\n          break;\n        }\n      }\n\n      if (!connection && this._connections.length < this.options.maxConnections) {\n        connection = this._createConnection();\n      }\n\n      if (!connection) {\n        // no more free connection slots available\n        this.idling = false;\n        return;\n      } // check if there is free space in the processing queue\n\n\n      if (!this.idling && this._queue.length < this.options.maxConnections) {\n        this.idling = true;\n        this.emit('idle');\n      }\n\n      var entry = connection.queueEntry = this._queue.shift();\n\n      entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n      connection.available = false;\n      this.logger.debug({\n        tnx: 'pool',\n        cid: connection.id,\n        messageId: entry.messageId,\n        action: 'assign'\n      }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);\n\n      if (this._rateLimit.limit) {\n        this._rateLimit.counter++;\n\n        if (!this._rateLimit.checkpoint) {\n          this._rateLimit.checkpoint = Date.now();\n        }\n      }\n\n      connection.send(entry.mail, function (err, info) {\n        // only process callback if current handler is not changed\n        if (entry === connection.queueEntry) {\n          try {\n            entry.callback(err, info);\n          } catch (E) {\n            _this4.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n\n          connection.queueEntry = false;\n        }\n      });\n    }\n    /**\n     * Creates a new pool resource\n     */\n\n  }, {\n    key: \"_createConnection\",\n    value: function _createConnection() {\n      var _this5 = this;\n\n      var connection = new PoolResource(this);\n      connection.id = ++this._connectionCounter;\n      this.logger.info({\n        tnx: 'pool',\n        cid: connection.id,\n        action: 'conection'\n      }, 'Created new pool resource #%s', connection.id); // resource comes available\n\n      connection.on('available', function () {\n        _this5.logger.debug({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'available'\n        }, 'Connection #%s became available', connection.id);\n\n        if (_this5._closed) {\n          // if already closed run close() that will remove this connections from connections list\n          _this5.close();\n        } else {\n          // check if there's anything else to send\n          _this5._processMessages();\n        }\n      }); // resource is terminated with an error\n\n      connection.once('error', function (err) {\n        if (err.code !== 'EMAXLIMIT') {\n          _this5.logger.error({\n            err: err,\n            tnx: 'pool',\n            cid: connection.id\n          }, 'Pool Error for #%s: %s', connection.id, err.message);\n        } else {\n          _this5.logger.debug({\n            tnx: 'pool',\n            cid: connection.id,\n            action: 'maxlimit'\n          }, 'Max messages limit exchausted for #%s', connection.id);\n        }\n\n        if (connection.queueEntry) {\n          try {\n            connection.queueEntry.callback(err);\n          } catch (E) {\n            _this5.logger.error({\n              err: E,\n              tnx: 'callback',\n              cid: connection.id\n            }, 'Callback error for #%s: %s', connection.id, E.message);\n          }\n\n          connection.queueEntry = false;\n        } // remove the erroneus connection from connections list\n\n\n        _this5._removeConnection(connection);\n\n        _this5._continueProcessing();\n      });\n      connection.once('close', function () {\n        _this5.logger.info({\n          tnx: 'connection',\n          cid: connection.id,\n          action: 'closed'\n        }, 'Connection #%s was closed', connection.id);\n\n        _this5._removeConnection(connection);\n\n        if (connection.queueEntry) {\n          // If the connection closed when sending, add the message to the queue again\n          // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n          // in the next event loop\n          setTimeout(function () {\n            if (connection.queueEntry) {\n              _this5.logger.debug({\n                tnx: 'pool',\n                cid: connection.id,\n                messageId: connection.queueEntry.messageId,\n                action: 'requeue'\n              }, 'Re-queued message <%s> for #%s', connection.queueEntry.messageId, connection.id);\n\n              _this5._queue.unshift(connection.queueEntry);\n\n              connection.queueEntry = false;\n            }\n\n            _this5._continueProcessing();\n          }, 50);\n        } else {\n          _this5._continueProcessing();\n        }\n      });\n\n      this._connections.push(connection);\n\n      return connection;\n    }\n    /**\n     * Continue to process message if the pool hasn't closed\n     */\n\n  }, {\n    key: \"_continueProcessing\",\n    value: function _continueProcessing() {\n      var _this6 = this;\n\n      if (this._closed) {\n        this.close();\n      } else {\n        setTimeout(function () {\n          return _this6._processMessages();\n        }, 100);\n      }\n    }\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */\n\n  }, {\n    key: \"_removeConnection\",\n    value: function _removeConnection(connection) {\n      var index = this._connections.indexOf(connection);\n\n      if (index !== -1) {\n        this._connections.splice(index, 1);\n      }\n    }\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */\n\n  }, {\n    key: \"_checkRateLimit\",\n    value: function _checkRateLimit(callback) {\n      var _this7 = this;\n\n      if (!this._rateLimit.limit) {\n        return callback();\n      }\n\n      var now = Date.now();\n\n      if (this._rateLimit.counter < this._rateLimit.limit) {\n        return callback();\n      }\n\n      this._rateLimit.waiting.push(callback);\n\n      if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n        return this._clearRateLimit();\n      } else if (!this._rateLimit.timeout) {\n        this._rateLimit.timeout = setTimeout(function () {\n          return _this7._clearRateLimit();\n        }, this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n        this._rateLimit.checkpoint = now;\n      }\n    }\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */\n\n  }, {\n    key: \"_clearRateLimit\",\n    value: function _clearRateLimit() {\n      clearTimeout(this._rateLimit.timeout);\n      this._rateLimit.timeout = null;\n      this._rateLimit.counter = 0;\n      this._rateLimit.checkpoint = false; // resume all paused connections\n\n      while (this._rateLimit.waiting.length) {\n        var cb = this._rateLimit.waiting.shift();\n\n        setImmediate(cb);\n      }\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */\n\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this.idling;\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(callback) {\n      var _this8 = this;\n\n      var promise;\n\n      if (!callback) {\n        promise = new Promise(function (resolve, reject) {\n          callback = shared.callbackPromise(resolve, reject);\n        });\n      }\n\n      var auth = new PoolResource(this).auth;\n      this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n          return callback(err);\n        }\n\n        var options = _this8.options;\n\n        if (socketOptions && socketOptions.connection) {\n          _this8.logger.info({\n            tnx: 'proxy',\n            remoteAddress: socketOptions.connection.remoteAddress,\n            remotePort: socketOptions.connection.remotePort,\n            destHost: options.host || '',\n            destPort: options.port || '',\n            action: 'connected'\n          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n\n          options = shared.assign(false, options);\n          Object.keys(socketOptions).forEach(function (key) {\n            options[key] = socketOptions[key];\n          });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n        connection.once('error', function (err) {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          connection.close();\n          return callback(err);\n        });\n        connection.once('end', function () {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          return callback(new Error('Connection closed'));\n        });\n\n        var finalize = function finalize() {\n          if (returned) {\n            return;\n          }\n\n          returned = true;\n          connection.quit();\n          return callback(null, true);\n        };\n\n        connection.connect(function () {\n          if (returned) {\n            return;\n          }\n\n          if (auth) {\n            connection.login(auth, function (err) {\n              if (returned) {\n                return;\n              }\n\n              if (err) {\n                returned = true;\n                connection.close();\n                return callback(err);\n              }\n\n              finalize();\n            });\n          } else {\n            finalize();\n          }\n        });\n      });\n      return promise;\n    }\n  }]);\n\n  return SMTPPool;\n}(EventEmitter); // expose to the world\n\n\nmodule.exports = SMTPPool;","map":null,"metadata":{},"sourceType":"script"}