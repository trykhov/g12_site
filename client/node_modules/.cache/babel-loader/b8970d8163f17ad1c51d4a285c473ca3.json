{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _classCallCheck = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/createClass\");\n\nvar http = require('request');\n\nvar pkg = require('../../package.json');\n\nvar _require = require('@sendgrid/helpers'),\n    mergeData = _require.helpers.mergeData,\n    ResponseError = _require.classes.ResponseError;\n/**\n * Sendgrid REST Client\n */\n\n\nvar Client =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor\n   */\n  function Client() {\n    _classCallCheck(this, Client);\n\n    //API key\n    this.apiKey = ''; //Default headers\n\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'User-agent': 'sendgrid/' + pkg.version + ';nodejs'\n    }; //Empty default request\n\n    this.defaultRequest = {\n      json: true,\n      baseUrl: 'https://api.sendgrid.com/',\n      url: '',\n      method: 'GET',\n      headers: {}\n    };\n  }\n  /**\n   * Set API key\n   */\n\n\n  _createClass(Client, [{\n    key: \"setApiKey\",\n    value: function setApiKey(apiKey) {\n      this.apiKey = apiKey;\n    }\n    /**\n     * Set default header\n     */\n\n  }, {\n    key: \"setDefaultHeader\",\n    value: function setDefaultHeader(key, value) {\n      this.defaultHeaders[key] = value;\n      return this;\n    }\n    /**\n     * Set default request\n     */\n\n  }, {\n    key: \"setDefaultRequest\",\n    value: function setDefaultRequest(key, value) {\n      this.defaultRequest[key] = value;\n      return this;\n    }\n    /**\n     * Create headers for request\n     */\n\n  }, {\n    key: \"createHeaders\",\n    value: function createHeaders(data) {\n      //Merge data with default headers\n      var headers = mergeData(this.defaultHeaders, data); //Add API key, but don't overwrite if header already set\n\n      if (typeof headers.Authorization === 'undefined' && this.apiKey) {\n        headers.Authorization = 'Bearer ' + this.apiKey;\n      } //Return\n\n\n      return headers;\n    }\n    /**\n     * Create request\n     */\n\n  }, {\n    key: \"createRequest\",\n    value: function createRequest(data) {\n      //Keep URL parameter consistent\n      if (data.uri) {\n        data.url = data.uri;\n        delete data.uri;\n      } //Merge data with empty request\n\n\n      var request = mergeData(this.defaultRequest, data); //Add headers\n\n      request.headers = this.createHeaders(request.headers);\n      return request;\n    }\n    /**\n     * Do a request\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(data, cb) {\n      //Create request\n      var request = this.createRequest(data); //Perform request\n\n      var promise = new Promise(function (resolve, reject) {\n        http(request, function (error, response, body) {\n          //Request error\n          if (error) {\n            return reject(error);\n          } //Response error\n\n\n          if (response.statusCode >= 400) {\n            return reject(new ResponseError(response));\n          } //Successful response\n\n\n          resolve([response, body]);\n        });\n      }); // Throw and error incase function not passed\n\n      if (cb && typeof cb !== 'function') {\n        throw new Error('Callback passed is not a function.');\n      } //Execute callback if provided\n\n\n      if (cb) {\n        promise.then(function (result) {\n          return cb(null, result);\n        }).catch(function (error) {\n          return cb(error, null);\n        });\n      } //Return promise\n\n\n      return promise;\n    }\n  }]);\n\n  return Client;\n}(); //Export class\n\n\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}