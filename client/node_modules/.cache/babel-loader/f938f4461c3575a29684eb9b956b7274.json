{"ast":null,"code":"// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import App from './components/App';\n//\n//\n// ReactDOM.render(<App />, document.querySelector('#root'));\nvar fs = require('fs');\n\nvar readline = require('readline');\n\nvar _require = require('googleapis'),\n    google = _require.google; // If modifying these scopes, delete token.json.\n\n\nvar SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']; // The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nvar TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', function (err, content) {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Gmail API.\n\n  authorize(JSON.parse(content), listLabels);\n});\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\n\nfunction authorize(credentials, callback) {\n  var _credentials$installe = credentials.installed,\n      client_secret = _credentials$installe.client_secret,\n      client_id = _credentials$installe.client_id,\n      redirect_uris = _credentials$installe.redirect_uris;\n  var oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, function (err, token) {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\n\n\nfunction getNewToken(oAuth2Client, callback) {\n  var authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', function (code) {\n    rl.close();\n    oAuth2Client.getToken(code, function (err, token) {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), function (err) {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\n * Lists the labels in the user's account.\n *\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\n\n\nfunction listLabels(auth) {\n  var gmail = google.gmail({\n    version: 'v1',\n    auth: auth\n  });\n  gmail.users.labels.list({\n    userId: 'me'\n  }, function (err, res) {\n    if (err) return console.log('The API returned an error: ' + err);\n    var labels = res.data.labels;\n\n    if (labels.length) {\n      console.log('Labels:');\n      labels.forEach(function (label) {\n        console.log(\"- \".concat(label.name));\n      });\n    } else {\n      console.log('No labels found.');\n    }\n  });\n}","map":{"version":3,"sources":["/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/src/index.js"],"names":["fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listLabels","credentials","callback","installed","client_secret","client_id","redirect_uris","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","gmail","version","users","labels","list","userId","res","data","length","forEach","label","name"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import App from './components/App';\n//\n//\n// ReactDOM.render(<App />, document.querySelector('#root'));\nconst fs = require('fs');\nconst readline = require('readline');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = 'token.json';\n\n// Load client secrets from a local file.\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  // Authorize a client with credentials, then call the Gmail API.\n  authorize(JSON.parse(content), listLabels);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(\n      client_id, client_secret, redirect_uris[0]);\n\n  // Check if we have previously stored a token.\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES,\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  rl.question('Enter the code from that page here: ', (code) => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token);\n      // Store the token to disk for later program executions\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n\n/**\n * Lists the labels in the user's account.\n *\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nfunction listLabels(auth) {\n  const gmail = google.gmail({version: 'v1', auth});\n  gmail.users.labels.list({\n    userId: 'me',\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const labels = res.data.labels;\n    if (labels.length) {\n      console.log('Labels:');\n      labels.forEach((label) => {\n        console.log(`- ${label.name}`);\n      });\n    } else {\n      console.log('No labels found.');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}