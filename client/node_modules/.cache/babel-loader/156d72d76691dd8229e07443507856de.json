{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _classCallCheck = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tryckhov/Dropbox/Programming/Web Development/React/g12-site/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('@sendgrid/client'),\n    Client = _require.Client;\n\nvar _require2 = require('@sendgrid/helpers'),\n    Mail = _require2.classes.Mail;\n/**\n * Mail service class\n */\n\n\nvar MailService =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor\n   */\n  function MailService() {\n    _classCallCheck(this, MailService);\n\n    //Set client and initialize substitution wrappers\n    this.setClient(new Client());\n    this.setSubstitutionWrappers('{{', '}}');\n  }\n  /**\n   * Set client\n   */\n\n\n  _createClass(MailService, [{\n    key: \"setClient\",\n    value: function setClient(client) {\n      this.client = client;\n    }\n    /**\n     * API key pass through for convenience\n     */\n\n  }, {\n    key: \"setApiKey\",\n    value: function setApiKey(apiKey) {\n      this.client.setApiKey(apiKey);\n    }\n    /**\n     * Set substitution wrappers\n     */\n\n  }, {\n    key: \"setSubstitutionWrappers\",\n    value: function setSubstitutionWrappers(left, right) {\n      if (typeof left === 'undefined' || typeof right === 'undefined') {\n        throw new Error('Must provide both left and right side wrappers');\n      }\n\n      if (!Array.isArray(this.substitutionWrappers)) {\n        this.substitutionWrappers = [];\n      }\n\n      this.substitutionWrappers[0] = left;\n      this.substitutionWrappers[1] = right;\n    }\n    /**\n     * Send email\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this = this;\n\n      var isMultiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var cb = arguments.length > 2 ? arguments[2] : undefined;\n\n      //Callback as second parameter\n      if (typeof isMultiple === 'function') {\n        cb = isMultiple;\n        isMultiple = false;\n      } //Array? Send in parallel\n\n\n      if (Array.isArray(data)) {\n        //Create promise\n        var promise = Promise.all(data.map(function (item) {\n          return _this.send(item, isMultiple);\n        })); //Execute callback if provided\n\n        if (cb) {\n          promise.then(function (result) {\n            return cb(null, result);\n          }).catch(function (error) {\n            return cb(error, null);\n          });\n        } //Return promise\n\n\n        return promise;\n      } //Send mail\n\n\n      try {\n        //Append multiple flag to data if not set\n        if (typeof data.isMultiple === 'undefined') {\n          data.isMultiple = isMultiple;\n        } //Append global substitution wrappers if not set in data\n\n\n        if (typeof data.substitutionWrappers === 'undefined') {\n          data.substitutionWrappers = this.substitutionWrappers;\n        } //Create Mail instance from data and get JSON body for request\n\n\n        var mail = Mail.create(data);\n        var body = mail.toJSON(); //Create request\n\n        var request = {\n          method: 'POST',\n          url: '/v3/mail/send',\n          body: body\n        }; //Send\n\n        return this.client.request(request, cb);\n      } //Catch sync errors\n      catch (error) {\n        //Pass to callback if provided\n        if (cb) {\n          cb(error, null);\n        } //Reject promise\n\n\n        return Promise.reject(error);\n      }\n    }\n    /**\n     * Send multiple emails (shortcut)\n     */\n\n  }, {\n    key: \"sendMultiple\",\n    value: function sendMultiple(data, cb) {\n      return this.send(data, true, cb);\n    }\n  }]);\n\n  return MailService;\n}(); //Export class\n\n\nmodule.exports = MailService;","map":null,"metadata":{},"sourceType":"script"}